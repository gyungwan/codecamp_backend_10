// 정수 제곱근 판별
// 문제 설명
// 임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
// n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.

// 제한 사항
// n은 1이상, 50000000000000 이하인 양의 정수입니다.
// 입출력 예
// n	return
// 121	144
// 3	-1
// 입출력 예 설명
// 입출력 예#1
// 121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.

// 입출력 예#2
// 3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.

/////여기에 입력하세요

function solution(n) {
  let answer = -1;
  //  i 를 1부터 증가해서
  // i * i ===n
  for (let i = 1; i * i <= n; i++) {
    if (i * i === n) {
      //제곱근을 찾은 경우
      // answer = i + 1
      // return answer *answer
      //return (i+1)*(i+1)
      return (i + 1) ** 2;
    }
  }
  // 제곱근을 찾지 못한경우
  return answer;
}

///제곱근
//제곱의 기준이 되는  수
//2는 4의 제곱근
// 2 * 2 === 4

////메소드 사용

function solution(n) {
  //제곱근을 구하는 메소드
  //괄호안의 숫자를 넣고 제곱이 맞다면 제곱을 찾아준다
  //주어진 수가 제곱근이 맞다면 수를 돌려주고 아니라면
  //소수점이 있는 수를 돌려줌
  let sqrt = Math.sqrt(n);
  //돌려받은 수가 정수인지 아닌지 확인하는 메소드 불린값으로 반환

  if (Number.isInteger(sqrt) === true) {
    //정수인경우 : 제곱근이 있는경우
    // return (sqrt+1)**2 //거듭제곱 연산자
    return Math.pow(sqrt + 1, 2); //제곱해주는 메소드 앞에는 제곱을하려는 숫자 뒤에는 몇제곱을 해줄지 써줌
  } else {
    //정수가 아닌경우 :제곱근이 없는경우 : false
    return -1;
  }
}
